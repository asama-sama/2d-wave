function e(e){return e&&e.__esModule?e.default:e}class t{static uniforms={xMin:null,xMax:null};constructor(e,r,n){this.vertices=e,this.xMin=r,this.xMax=n,this.updateWave=e=>{const r=this.vertices.length/4;for(let n=0;n<r;n++){const r=this.vertices[4*n],o=t.getHeightAtPoint(r,e);this.vertices[4*n+3]=o}}}render(){t.gl.bindBuffer(t.gl.ARRAY_BUFFER,t.vertexBuffer),t.gl.bufferData(t.gl.ARRAY_BUFFER,this.vertices,t.gl.STATIC_DRAW),t.gl.uniform1f(t.uniforms.xMin,this.xMin),t.gl.uniform1f(t.uniforms.xMax,this.xMax),t.gl.drawArrays(t.gl.TRIANGLE_STRIP,0,this.vertices.length/2)}static createProgram=r=>{const n=r.createShader(r.VERTEX_SHADER);if(!n)throw new Error("no vertex shader found");r.shaderSource(n,e("precision mediump float;\n#define GLSLIFY 1\n\nattribute vec3 vertex;\n\nuniform float xMin;\nuniform float xMax;\n\nvoid main() {\n  float mp;\n  float l;\n  float newX;\n  mp = (xMax + xMin) / 2.0;\n  l = xMax - xMin;\n\n  newX = (vertex.x - mp)/(l/2.0);\n\n  gl_Position = vec4(newX, vertex.y, 0, 1.0);\n}")),r.compileShader(n);const o=r.createShader(r.FRAGMENT_SHADER);if(!o)throw new Error("no fragment shader found");r.shaderSource(o,e("precision mediump float;\n#define GLSLIFY 1\n\nvoid main() {\n  gl_FragColor = vec4(0.2, 0.3, 0.5, 1.0);\n}")),r.compileShader(o);const i=r.createProgram();if(!i)throw new Error("no program found");r.attachShader(i,n),r.attachShader(i,o),r.linkProgram(i);const a=r.createBuffer();if(!a)throw new Error("no buffer found");t.vertexBuffer=a;const s=r.getAttribLocation(i,"vertex");r.enableVertexAttribArray(s),r.bindBuffer(r.ARRAY_BUFFER,a),r.vertexAttribPointer(s,2,r.FLOAT,!1,0,0);const c=r.getUniformLocation(i,"xMin");this.uniforms.xMin=c;const f=r.getUniformLocation(i,"xMax");this.uniforms.xMax=f,r.useProgram(i),t.gl=r};static initialise=(e,r,n)=>{const o=(n-r)/e;let i=[];for(let t=0;t<=e;t++){const e=o*t+r,n=this.getHeightAtPoint(e,0);i=[...i,e,-1,e,n]}return new t(new Float32Array(i),r,n)};static getHeightAtPoint=(e,t)=>Math.sin(e+t)/2+.2}const r=document.querySelector("canvas");if(!r)throw new Error("canvas could not be found");const n=r.getContext("webgl");if(!n)throw new Error("WebGL not supported");n.enable(n.DEPTH_TEST),t.createProgram(n);const o=t.initialise(500,-2*Math.PI,2*Math.PI);let i=0;const a=()=>{requestAnimationFrame(a),o.render(),i+=.05,o.updateWave(i)};a();
//# sourceMappingURL=index.2330c303.js.map
