{"mappings":"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","sources":["src/models/wave.ts","src/shaders/vert.glsl","src/shaders/frag.glsl","src/app.ts"],"sourcesContent":["import vertShader from '../shaders/vert.glsl'\nimport fragShader from '../shaders/frag.glsl'\n\ntype Uniforms = {\n  [key: string]: WebGLUniformLocation | null\n}\n\nexport class Wave {\n  static gl: WebGLRenderingContext;\n  static vertexBuffer: WebGLBuffer;\n  static uniforms: Uniforms = {\n    xMin: null,\n    xMax: null,\n  }\n\n  constructor(private vertices: Float32Array, private xMin: number, private xMax: number) { }\n  \n  render() {\n    Wave.gl.bindBuffer(Wave.gl.ARRAY_BUFFER, Wave.vertexBuffer)\n    Wave.gl.bufferData(\n      Wave.gl.ARRAY_BUFFER,\n      this.vertices,\n      Wave.gl.STATIC_DRAW\n    )\n\n    Wave.gl.uniform1f(Wave.uniforms.xMin, this.xMin)\n    Wave.gl.uniform1f(Wave.uniforms.xMax, this.xMax)\n\n    Wave.gl.drawArrays(Wave.gl.TRIANGLE_STRIP, 0, this.vertices.length/2)\n  }\n\n  updateWave = (t: number) => {\n    const points = this.vertices.length / 4\n    for (let i = 0; i < points; i++) {\n      const x = this.vertices[i*4]\n      const y = Wave.getHeightAtPoint(x, t)\n      this.vertices[i*4+3] = y\n    }\n  }\n\n  static createProgram = (gl: WebGLRenderingContext) => {\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER)\n    if (!vertexShader) throw new Error('no vertex shader found')\n    gl.shaderSource(vertexShader, vertShader)\n    gl.compileShader(vertexShader)\n\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)\n    if (!fragmentShader) throw new Error(\"no fragment shader found\")\n    gl.shaderSource(fragmentShader, fragShader)\n    gl.compileShader(fragmentShader)\n\n    const program = gl.createProgram()\n    if (!program) throw new Error('no program found')\n    gl.attachShader(program, vertexShader)\n    gl.attachShader(program, fragmentShader)\n    gl.linkProgram(program)\n\n    const vertexBuffer = gl.createBuffer()\n    if (!vertexBuffer) throw new Error('no buffer found')\n    Wave.vertexBuffer = vertexBuffer\n    const vertexLocation = gl.getAttribLocation(program, 'vertex')\n    gl.enableVertexAttribArray(vertexLocation)\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)\n    gl.vertexAttribPointer(vertexLocation, 2, gl.FLOAT, false, 0, 0)\n\n    const xMinLocation = gl.getUniformLocation(program, 'xMin')\n    this.uniforms.xMin = xMinLocation\n\n    const xMaxLocation = gl.getUniformLocation(program, 'xMax')\n    this.uniforms.xMax = xMaxLocation\n\n    gl.useProgram(program)\n    Wave.gl = gl\n  }\n\n  static initialise = (n: number, xMin: number, xMax: number) => {\n\n    const s = (xMax - xMin) / n;\n    const mp = (xMax + xMin) / 2;\n    const l = xMax - xMin\n    // const transform = (x: number) => (x - mp)/(l/2) // transform from [xMin, xMax] -> [-1, 1]\n    let points: number[] = []\n\n    for (let i = 0; i <= n; i++) {\n      const x = s * i + xMin\n      const y = this.getHeightAtPoint(x, 0)\n      // const xt = transform(x)\n      points = [...points,  x, -1, x, y] // y axis on wave followed by bottom for triangle strip\n    }\n    return new Wave(new Float32Array(points), xMin, xMax)\n  }\n\n  static getHeightAtPoint = (x: number, t: number) => {\n    return Math.sin(x + t)/2 + 0.2\n  }\n}","precision mediump float;\n\nattribute vec3 vertex;\n\nuniform float xMin;\nuniform float xMax;\n\nvoid main() {\n  float mp;\n  float l;\n  float newX;\n  mp = (xMax + xMin) / 2.0;\n  l = xMax - xMin;\n\n  newX = (vertex.x - mp)/(l/2.0);\n\n  gl_Position = vec4(newX, vertex.y, 0, 1.0);\n}","precision mediump float;\n\nvoid main() {\n  gl_FragColor = vec4(0.2, 0.3, 0.5, 1.0);\n}","// @ts-ignore\n// import { mat4 } from \"./lib/gl-matrix-min\" \nimport { Wave } from './models/wave';\n\nconst canvas: HTMLCanvasElement | null = document.querySelector(\"canvas\");\nif (!canvas) throw new Error('canvas could not be found')\nconst gl = canvas.getContext(\"webgl\");\nif (!gl) {\n  throw new Error(\"WebGL not supported\");\n}\ngl.enable(gl.DEPTH_TEST);\n\nWave.createProgram(gl)\n\nconst wave = Wave.initialise(500,  -2*Math.PI, 2*Math.PI)\n\nlet t=0\nconst animate = () => {\n  requestAnimationFrame(animate)\n  wave.render()\n  t+=0.05\n  wave.updateWave(t)\n}\nanimate()\n"],"names":["$c35b696eae0fd822$export$b8bb87b40c00c04e","static","xMin","xMax","constructor","vertices","updateWave","t","points","this","length","i","x","y","getHeightAtPoint","render","gl","bindBuffer","ARRAY_BUFFER","vertexBuffer","bufferData","STATIC_DRAW","uniform1f","uniforms","drawArrays","TRIANGLE_STRIP","vertexShader","createShader","VERTEX_SHADER","Error","shaderSource","$parcel$interopDefault","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","createBuffer","vertexLocation","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","xMinLocation","getUniformLocation","xMaxLocation","useProgram","n","s","Float32Array","Math","sin","$f43313d21d3fd8e2$var$canvas","document","querySelector","$f43313d21d3fd8e2$var$gl","getContext","enable","DEPTH_TEST","$f43313d21d3fd8e2$var$wave","initialise","PI","$f43313d21d3fd8e2$var$t","$f43313d21d3fd8e2$var$animate","requestAnimationFrame"],"version":3,"file":"index.2330c303.js.map"}